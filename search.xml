<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript</title>
    <url>/2024/09/18/JavaScript/</url>
    <content><![CDATA[<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> num)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程</title>
    <url>/2024/09/07/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="JUC-：Java-util-concurrent工具包"><a href="#JUC-：Java-util-concurrent工具包" class="headerlink" title="JUC  ：Java.util.concurrent工具包"></a>JUC  ：Java.util.concurrent工具包</h2><blockquote>
<p>并发、并行</p>
</blockquote>
<ul>
<li>并发：如多线程操作CPU单核资源</li>
<li>并行：如多线程操作CPU多核资源<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取CPU核数 </span></span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure>
<strong>并发编程的本质：<em>充分利用CPU资源</em></strong></li>
</ul>
<blockquote>
<p>wait&#x2F;sleep</p>
</blockquote>
<p>wait &#x3D;&gt;Object，会释放锁，必须在同步代码块中，存在中断异常<br>sleep &#x3D;&gt;Thread，不会释放锁，可以在任何地方，需要抛出异常</p>
<h2 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock 锁"></a>Lock 锁</h2><p>1.synchronized</p>
<blockquote>
<p>按顺序，不抢占</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"><span class="comment">//        new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;).start();</span></span><br><span class="line">        <span class="comment">//用lambda表达式</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="comment">//synchronized 本质：队列，锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖出了第&quot;</span>+(number--)+<span class="string">&quot;张票&quot;</span>+<span class="string">&quot;剩余：&quot;</span>+number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>ReentrantLock<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ticket2</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">50</span>; i++) ticket.sale(); &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">50</span>; i++) ticket.sale(); &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">50</span>; i++) ticket.sale(); &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、Lock lock = new ReentrantLock();</span></span><br><span class="line"><span class="comment"> * 2、lock.lock();   //加锁</span></span><br><span class="line"><span class="comment"> * 3、finally  =&gt;  lock.unlock();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket2</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="comment">//synchronized 本质：队列，锁</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//业务</span></span><br><span class="line">            <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖出了第&quot;</span>+(number--)+<span class="string">&quot;张票&quot;</span>+<span class="string">&quot;剩余：&quot;</span>+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Synchronized 和 Lock 的区别<ul>
<li>Synchronized 是Java内置的关键字，Lock 是一个Java类</li>
<li>Synchronized 无法判断获取锁的状态，Lock 可以判断是否获取到了锁</li>
<li>Synchronized 会自动释放锁，Lock 必须手动释放锁，不释放锁会产生 <strong>死锁</strong> 问题<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li>Synchronized 中线程1获得锁后进入阻塞状态，线程2会一直等待；Lock  不一定会一直等待<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lock.trylock(); <span class="comment">//尝试获得锁</span></span><br></pre></td></tr></table></figure></li>
<li>Synchronized 可重入锁，不可中断，非公平；Lock  可重入锁，可以判断锁，可自行设置是否公平<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>); <span class="comment">//公平</span></span><br><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(); <span class="comment">//非公平</span></span><br></pre></td></tr></table></figure></li>
<li>Synchronized 适合锁少量代码，Lock 适合锁大量的同步代码</li>
</ul>
<p><code> 等待应该总是出现在循环中，用while代替if判断，*防止虚假唤醒问题*</code></p>
<h2 id="应用-condition"><a href="#应用-condition" class="headerlink" title="应用 condition"></a>应用 condition</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//+1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">0</span>)&#123;</span><br><span class="line">                condition.await(); <span class="comment">//等待，如Synchronized中的wait()</span></span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+number);</span><br><span class="line">            condition.signalAll(); <span class="comment">//通知全部，如Synchronized中的notifyAll()</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number  == <span class="number">0</span>)&#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="condition-精准通知唤醒"><a href="#condition-精准通知唤醒" class="headerlink" title="condition 精准通知唤醒"></a>condition 精准通知唤醒</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data2</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data2.A();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data2.B();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data2.C();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data2</span>&#123;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">1</span>)&#123;</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;A&quot;</span>);</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">2</span>)&#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;b&quot;</span>);</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">C</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">3</span>)&#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;c&quot;</span>);</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="集合类不安全"><a href="#集合类不安全" class="headerlink" title="集合类不安全"></a>集合类不安全</h2><ol>
<li>List 不安全</li>
</ol>
<blockquote>
<p>CopyOnWriteArrayList&lt;&gt;()</p>
</blockquote>
<p>解决并发修改异常 java.util.concurrentModificationException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  UUID.randomUUID().toString().substring(0, 5)</span></span><br><span class="line"><span class="comment"> *  0~5随机数生成</span></span><br><span class="line"><span class="comment"> *  CopyOnWriteArrayList 复制生成列表，解决集合类中List不安全问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//生成及遍历列表</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;);</span></span><br><span class="line"><span class="comment">//        list.forEach(System.out :: println);</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; &#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>Set 不安全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set的并发修改错误 java.util.ConcurrentModificationException</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Set set = new HashSet();</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>HashSet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//add</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Map 的加载因子</strong></p>
<p>Map 扩容之前容量的一个度量标准，默认0.75，即当容量达到75%时，会进行扩容，分配一个更大的数<br>组并将原有元素重新计算哈希值后放入新的数组中</p>
</li>
</ol>
<p><strong>初始化容量</strong></p>
<ul>
<li>HashMap 默认初始化容量是16</li>
<li>HashTable 默认初始化容量是11</li>
<li>Map容量基于2的幂次方计算的</li>
</ul>
<h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><blockquote>
<p>创建多线程：</p>
</blockquote>
<ul>
<li>可以有返回值</li>
<li>可以抛出异常</li>
<li>call() 方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">//Callable 需要通过 FutureTask 为适配类，启动线程</span></span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(myThread);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask,<span class="string">&quot;B&quot;</span>).start(); <span class="comment">//只会打印一个call，结果会被缓存，效率高</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通过get获取返回值</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  get方法可能会被阻塞</span></span><br><span class="line"><span class="comment">         *  放最后或者用异步通信处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="并发编程常用辅助类"><a href="#并发编程常用辅助类" class="headerlink" title="并发编程常用辅助类"></a>并发编程常用辅助类</h2><blockquote>
<p>CountDownLatch 减法计数器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">6</span>);<span class="comment">//线程数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">                latch.countDown(); <span class="comment">//-1</span></span><br><span class="line">            &#125;,<span class="string">&quot;m&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">        latch.await(); <span class="comment">//等待计数器归零其他线程执行完毕</span></span><br><span class="line">        System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>CyclicBarrier 加法计数器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//参数为 CyclicBarrier(int parties, Runnable barrierAction)</span></span><br><span class="line">		<span class="comment">//到达7后执行</span></span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">barrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">7</span>,()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() +<span class="string">&quot;-&gt;&quot;</span>+ temp);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    barrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Semaphore 信号量<br>并发<code>限流</code>，控制最大线程数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//最大容量，信号量</span></span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * acquire() 占有</span></span><br><span class="line"><span class="comment">                     * release() 释放</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;来了&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;走了&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ReadWriteLock-读写锁"><a href="#ReadWriteLock-读写锁" class="headerlink" title="ReadWriteLock 读写锁"></a>ReadWriteLock 读写锁</h2><blockquote>
<p>只能一个线程写(独占锁)，可以多个线程同时读(共享锁)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyCache</span> <span class="variable">myCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCache</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                myCache.put(temp+<span class="string">&quot;&quot;</span>,temp);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                myCache.get(temp+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义缓存</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">MyCache</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//private Map&lt;String,Object&gt; map = new ConcurrentHashMap&lt;&gt;(); //ConcurrentHashMap&lt;&gt;()不行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key,Object value)</span>&#123;</span><br><span class="line">        readWriteLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;写入&quot;</span>+key);</span><br><span class="line">            map.put(key,value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;写完了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readWriteLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        readWriteLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;读取了&quot;</span>+key);</span><br><span class="line">            map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;读完了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readWriteLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BlockingQueue-阻塞队列"><a href="#BlockingQueue-阻塞队列" class="headerlink" title="BlockingQueue 阻塞队列"></a>BlockingQueue 阻塞队列</h2><p>何处使用：多线程并发编程，线程池</p>
<p><span style="background-color:lightgrey;color:black;">Deque 双端队列 ; Queue 单端队列<br>AbstractQueue 非阻塞队列</span></p>
<ul>
<li>LinkBlockingQueue</li>
<li>ArrayBlockingQueue</li>
</ul>
<blockquote>
<p>四组API：</p>
</blockquote>
<table>
<thead>
<tr>
<th>方式</th>
<th>抛出异常</th>
<th>有返回值</th>
<th>阻塞等待</th>
<th>超时等待</th>
</tr>
</thead>
<tbody><tr>
<td>添加</td>
<td>add()</td>
<td>offer(Obj)</td>
<td>put()[无返回值]</td>
<td>offer(Obj,TimeOut,Util)</td>
</tr>
<tr>
<td>移除</td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(TimeOut,Util)</td>
</tr>
<tr>
<td>判断队首</td>
<td>element()</td>
<td>peek()</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>SynchronousQueue 同步队列</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        SynchronousQueue&lt;Integer&gt; synchronousQueue = <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    synchronousQueue.put(temp);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;get&quot;</span>+temp);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;take&quot;</span>+synchronousQueue.take());</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;take&quot;</span>+synchronousQueue.take());</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;take&quot;</span>+synchronousQueue.take());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><blockquote>
<p>池化技术–优化资源使用</p>
</blockquote>
<p>优点：</p>
<ol>
<li><span style="color:red;"><strong>线程复用</strong></span>,降低资源消耗</li>
<li><span style="color:red;"><strong>可以控制最大并发数</strong></span>，提升响应速度</li>
<li><span style="color:red;"><strong>管理线程</strong></span></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Executors创建（一般不用）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadExecutor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();<span class="comment">//单个线程</span></span><br><span class="line">        Executors.newFixedThreadPool(<span class="number">5</span>); <span class="comment">//固定大小的线程池</span></span><br><span class="line">        Executors.newCachedThreadPool(); <span class="comment">//可伸缩的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            threadExecutor.execute(()-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="number">1</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建方法的本质，应使用该方法创建线程池</span></span><br><span class="line"><span class="comment"> * 七大参数</span></span><br><span class="line"><span class="comment"> *  int corePoolSize, //核心线程池大小</span></span><br><span class="line"><span class="comment">    int maximumPoolSize, //最大核心线程池大小</span></span><br><span class="line"><span class="comment">    long keepAliveTime, //超时后没有调用就会释放</span></span><br><span class="line"><span class="comment">    TimeUnit unit, //超时单位</span></span><br><span class="line"><span class="comment">    BlockingQueue&lt;Runnable&gt; workQueue, //阻塞队列</span></span><br><span class="line"><span class="comment">    ThreadFactory threadFactory,  //线程工厂，创建线程的，一般不改动</span></span><br><span class="line"><span class="comment">    RejectedExecutionHandler handler //拒绝策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize, </span></span><br><span class="line"><span class="params">                            <span class="type">int</span> maximumPoolSize, </span></span><br><span class="line"><span class="params">                            <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                            TimeUnit unit, </span></span><br><span class="line"><span class="params">                            BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                            ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                            RejectedExecutionHandler handler)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>RejectedExecutionHandler 4种拒绝策略</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/xxbl6/PicUplroader/main/img/4%E7%A7%8D%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5.jpg"></p>
<blockquote>
<p><span style="color:lightblue;font-size:17px;"><strong>使用ThreadPoolExecutor自定义创建线程池</strong></span></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">poolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>,</span><br><span class="line">                <span class="number">5</span>,</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//最大容量 max + Queue</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                poolExecutor.execute(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            poolExecutor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p> <strong>maximumPoolSize 最大线程池大小确认</strong></p>
</blockquote>
<ul>
<li>CPU 密集型 ：几核的 CPU 就用多少线程数</li>
<li>IO 密集型 ：大于十分占用 IO 的线程</li>
</ul>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p><span style="color:lightgreen">函数式接口都可以简化lambda表达式</span></p>
<ol>
<li>Function&lt;参数类型,返回值类型&gt; 函数式接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Function function = new Function&lt;String,String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public String apply(String o) &#123;</span></span><br><span class="line"><span class="comment">//                return o;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line">        <span class="type">Function</span> <span class="variable">function</span> <span class="operator">=</span> (str)-&gt;&#123;<span class="keyword">return</span> str;&#125;;</span><br><span class="line">        System.out.println(function.apply(<span class="string">&quot;ss&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>判断型接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Predicate</span> <span class="variable">predicate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Predicate</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Predicate&lt;String&gt; predicate =(str)-&gt;&#123;<span class="keyword">return</span> str.isEmpty();&#125;;</span><br></pre></td></tr></table></figure></li>
<li>消费型接口 ：只有输入，没有返回值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; consumer = (str)-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>供给型接口 ：没有输入，只有输出<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Supplier</span> <span class="variable">supplier</span> <span class="operator">=</span> ()-&gt;&#123;<span class="keyword">return</span> <span class="number">1024</span>;&#125;;</span><br><span class="line">System.out.println(supplier.get());</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="stream-流式计算"><a href="#stream-流式计算" class="headerlink" title="stream 流式计算"></a>stream 流式计算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="number">20</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="number">21</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="number">22</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="number">23</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">5</span>,<span class="number">24</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合存储</span></span><br><span class="line">        List&lt;User&gt; list = Arrays.asList(u1,u2,u3,u4,u5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Stream 流计算</span></span><br><span class="line"><span class="comment">         *  1、id是奇数</span></span><br><span class="line"><span class="comment">         *  2、年龄大于21</span></span><br><span class="line"><span class="comment">         *  3、名字大写</span></span><br><span class="line"><span class="comment">         *  4、小到大排序</span></span><br><span class="line"><span class="comment">         *  5、只输出一个</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(user -&gt; &#123;<span class="keyword">return</span> user.getId()%<span class="number">2</span> != <span class="number">0</span>;&#125;)</span><br><span class="line">                .filter(user -&gt; &#123;<span class="keyword">return</span> user.getAge()&gt;<span class="number">21</span>;&#125;)</span><br><span class="line">                .map(user -&gt; &#123;<span class="keyword">return</span> user.getName().toUpperCase();&#125;)</span><br><span class="line">                .sorted((un1,un2)-&gt;&#123;<span class="keyword">return</span> un1.compareTo(un2);&#125;)</span><br><span class="line">                .limit(<span class="number">1</span>)</span><br><span class="line">                .forEach(System.out :: println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ForkJoin-分支合并"><a href="#ForkJoin-分支合并" class="headerlink" title="ForkJoin 分支合并"></a>ForkJoin 分支合并</h2><p>特点 ：工作窃取</p>
<p>大数据量计算时使用</p>
<p>RecursiveAction ：没有返回值 </p>
<p>RecurisiveTask ：有返回值</p>
<h2 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h2><p>无返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;other&quot;</span>);</span><br><span class="line">        completableFuture.get();  <span class="comment">//获取阻塞执行结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">            <span class="comment">//int i = 10/0;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//whenComplete&lt;T,U&gt;当编译成功时...</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; exceptionally = completableFuture.whenComplete((t, u) -&gt; &#123;</span><br><span class="line">            System.out.println(t); <span class="comment">//正常的返回结果</span></span><br><span class="line">            System.out.println(u); <span class="comment">//错误信息</span></span><br><span class="line">        &#125;).exceptionally(throwable -&gt; &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(exceptionally.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><ol>
<li><p>定义： Java 内存模型</p>
<blockquote>
<ul>
<li>可见性 ：当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。</li>
<li>原子性 ：一个操作或者多个操作要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</li>
<li>禁止指令重排 ：程序执行的顺序按照代码的先后顺序执行，禁止重排序来保证有序性。</li>
</ul>
</blockquote>
</li>
<li><p>约定</p>
<ul>
<li>线程解锁前，必须立刻把共享变量刷回主存</li>
<li>线程加锁前，必须读取主存中的最新值到工作区中</li>
<li>加锁和解锁必须是同一把锁</li>
</ul>
</li>
</ol>
<h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3><p>Volatile 是Java 虚拟机提供的<strong>轻量级同步机制</strong></p>
<p><strong>保证可见性</strong></p>
<p><strong>不保证原子性</strong></p>
<blockquote>
<p>使用原子类解决原子性问题：</p>
</blockquote>
<p>java.util.concurrent.atomic 工具包</p>
<p>如<code>num++ </code> 替换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">AtomicInteger</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">num1.getAndIncrement();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 若无 volatile 线程1从主存中获取num=0后会一直执行while</span></span><br><span class="line"><span class="comment"> * 有 volatile 后，会从主存中取得最新值到工作区中，因此会终止线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test14</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="comment">//main 线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; <span class="comment">//线程1</span></span><br><span class="line">            <span class="keyword">while</span> (num == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>compareAndSet ：比较并交换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">AtomicInteger</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2020</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//期望，更新；是为期望值则更新为更新值</span></span><br><span class="line">    System.out.println(num2.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>)); <span class="comment">//true</span></span><br><span class="line">    System.out.println(num2.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>)); <span class="comment">//false 已经在上边被修改为2021了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>unsafe 类 ：Java可以通过该类操作内存</p>
<h3 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h3><p>ABA问题 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A 线程中将数据修改后再改回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">num.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>)</span><br><span class="line">num.compareAndSet(<span class="number">2021</span>, <span class="number">2020</span>)</span><br><span class="line"><span class="comment">// 当 B 线程调用 num 时并不知道主存中的 num 已经被修改过，当作修改前的对象执行，即为ABA问题</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>原子引用解决ABA问题</p>
</blockquote>
<p>乐观锁思想 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test15</span> &#123;</span><br><span class="line">    <span class="comment">//初始值，初始时间戳</span></span><br><span class="line">    <span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp(); <span class="comment">//获取时间戳</span></span><br><span class="line">                System.out.println(<span class="string">&quot;A1-&gt;&quot;</span>+stamp);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(atomicStampedReference.compareAndSet(<span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">                        atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;A2-&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">                System.out.println(atomicStampedReference.compareAndSet(<span class="number">2</span>, <span class="number">1</span>,</span><br><span class="line">                        atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;A3-&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">            &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();</span><br><span class="line">                System.out.println(<span class="string">&quot;B1-&gt;&quot;</span>+stamp);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(atomicStampedReference.compareAndSet(<span class="number">1</span>, <span class="number">6</span>,</span><br><span class="line">                        stamp, stamp + <span class="number">1</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;B2-&gt;&quot;</span>+atomicStampedReference.getStamp());</span><br><span class="line">            &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库</title>
    <url>/2024/08/10/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="MySQL数据库优化"><a href="#MySQL数据库优化" class="headerlink" title="MySQL数据库优化"></a>MySQL数据库优化</h2><ol>
<li>SQL优化<ul>
<li>避免使用SELECT * ，只查询必要字段</li>
<li>避免在SQL中进行函数计算</li>
<li>避免使用 %LIKE，导致全表扫描</li>
<li>联合索引需要满足<em>最左匹配原则</em></li>
<li>不要对无索引字段进行排序</li>
<li>连表查询需要注意不同字段的字符集是否一致，否则也会导致全表扫描</li>
</ul>
</li>
<li>库表设计优化<ul>
<li>合理的表结构：如使用合适的数据类型</li>
<li>合理冗余字段：在适当时候（频繁的多表连接查询、实时性要求较高的系统等）进行反规范化设计，冗余部分数据，减少关联查询</li>
<li>索引优化：使用EXPLAIN分析查询执行计划，确认索引是否使用后进行优化</li>
<li>分库分表：针对超大规模数据库系统</li>
</ul>
</li>
<li>MySQL相关配置优化<ul>
<li>innodb_buffer_pool_size：增大 InnoDB 的缓冲池大小，一般设置为物理内存的 70-80%</li>
<li>query_cache_size：适当调整查询缓存大小</li>
<li>max_connections：增加最大连接数</li>
<li>table_open_cache：增加打开表的缓存大小</li>
<li>thread_cache_size：调整线程缓存大小以减少线程创建的开销</li>
</ul>
</li>
<li>硬件优化<ul>
<li>升级硬件：增加服务器的内存、CPU和存储速度</li>
<li>使用SSD</li>
</ul>
</li>
<li>使用缓存<br> 使用本地缓存，Redis分布式缓存</li>
</ol>
<h2 id="MySQL数据库维护"><a href="#MySQL数据库维护" class="headerlink" title="MySQL数据库维护"></a>MySQL数据库维护</h2><ol>
<li>定期备份，保证数据安全</li>
<li>定期清理不必要的数据和日志</li>
<li>定期重建索引</li>
<li>定期运行<strong>ANALYZE TABLE</strong> 分析表和 <strong>OPTIMIZE TABLE</strong> 优化表</li>
</ol>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p><code>class表</code></p>
<table>
<thead>
<tr>
<th>c_id</th>
<th>c_name</th>
<th>t_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>语文</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>数学</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>英语</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>化学</td>
<td>5</td>
</tr>
</tbody></table>
<p><code>Teacher表</code></p>
<table>
<thead>
<tr>
<th>t_id</th>
<th>t_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
</tr>
<tr>
<td>4</td>
<td>老六</td>
</tr>
</tbody></table>
<h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><table>
<thead>
<tr>
<th>c_id</th>
<th>c_name</th>
<th>t_id</th>
<th>t_id</th>
<th>t_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>语文</td>
<td>1</td>
<td>1</td>
<td>张三</td>
</tr>
<tr>
<td>2</td>
<td>数学</td>
<td>2</td>
<td>2</td>
<td>李四</td>
</tr>
<tr>
<td>3</td>
<td>英语</td>
<td>3</td>
<td>3</td>
<td>王五</td>
</tr>
</tbody></table>
<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><blockquote>
<p>左连接 </p>
</blockquote>
<table>
<thead>
<tr>
<th>c_id</th>
<th>c_name</th>
<th>t_id</th>
<th>t_id</th>
<th>t_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>语文</td>
<td>1</td>
<td>1</td>
<td>张三</td>
</tr>
<tr>
<td>2</td>
<td>数学</td>
<td>2</td>
<td>2</td>
<td>李四</td>
</tr>
<tr>
<td>3</td>
<td>英语</td>
<td>3</td>
<td>3</td>
<td>王五</td>
</tr>
<tr>
<td>4</td>
<td>化学</td>
<td>5</td>
<td>NULL</td>
<td>NULL</td>
</tr>
</tbody></table>
<blockquote>
<p>右连接</p>
</blockquote>
<table>
<thead>
<tr>
<th>c_id</th>
<th>c_name</th>
<th>t_id</th>
<th>t_id</th>
<th>t_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>语文</td>
<td>1</td>
<td>1</td>
<td>张三</td>
</tr>
<tr>
<td>2</td>
<td>数学</td>
<td>2</td>
<td>2</td>
<td>李四</td>
</tr>
<tr>
<td>3</td>
<td>英语</td>
<td>3</td>
<td>3</td>
<td>王五</td>
</tr>
<tr>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>4</td>
<td>老六</td>
</tr>
</tbody></table>
<blockquote>
<p>全连接</p>
</blockquote>
<table>
<thead>
<tr>
<th>c_id</th>
<th>c_name</th>
<th>t_id</th>
<th>t_id</th>
<th>t_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>语文</td>
<td>1</td>
<td>1</td>
<td>张三</td>
</tr>
<tr>
<td>2</td>
<td>数学</td>
<td>2</td>
<td>2</td>
<td>李四</td>
</tr>
<tr>
<td>3</td>
<td>英语</td>
<td>3</td>
<td>3</td>
<td>王五</td>
</tr>
<tr>
<td>4</td>
<td>化学</td>
<td>5</td>
<td>NULL</td>
<td>NULL</td>
</tr>
<tr>
<td>NULL</td>
<td>NULL</td>
<td>NULL</td>
<td>4</td>
<td>老六</td>
</tr>
</tbody></table>
<h2 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h2><p>MySQL 建立联合索引遵循最左匹配原则</p>
<blockquote>
<p>如果有一个 2 列的索引 (a, b)，则已经对 (a)、(a, b) 上建立了索引； </p>
</blockquote>
<blockquote>
<p>如果有一个 3 列索引 (a, b, c)，则已经对 (a)、(a, b)、(a, b, c) 上建立了索引；</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/07/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java基础知识</title>
    <url>/2024/07/09/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="InetAddress类的应用"><a href="#InetAddress类的应用" class="headerlink" title="InetAddress类的应用"></a>InetAddress类的应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询本机IP地址</span></span><br><span class="line">   <span class="type">InetAddress</span> <span class="variable">inetAddress1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ol>
<li>端口号位0~65535</li>
<li>端口协议分为TCP、UDP ；总端口号有65535* 2</li>
<li>端口号：<ul>
<li>公有端口：0~1023<br>  HTTP：80 ；HTTPS：443 ； FTP：21 ； Telent：23 ；</li>
<li>程序注册端口：1024~49151		<br>  Tomcat： 8080 ； MySQL： 3306 ； Oracle：1521；</li>
<li>动态、私有：49152~65535<br> netstart -ano 查看所有端口号<br> netstart -ano|findstr “8080”查看指定端口<br> tasklist|findstr “8696” 查看指定端口进程</li>
<li>查看端口号</li>
</ul>
</li>
</ol>
<h3 id="使用多线程和UDP实现聊天"><a href="#使用多线程和UDP实现聊天" class="headerlink" title="使用多线程和UDP实现聊天"></a>使用多线程和UDP实现聊天</h3><blockquote>
<p>客户端发送数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPClient</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//缓存数据的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> String toIP;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> toPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UDPClient</span><span class="params">(<span class="type">int</span> fromPort, String toIP, <span class="type">int</span> toPort)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.fromPort = fromPort;</span><br><span class="line">        <span class="built_in">this</span>.toIP = toIP;</span><br><span class="line">        <span class="built_in">this</span>.toPort = toPort;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(fromPort);</span><br><span class="line">            <span class="comment">//从标准输入中读取数据到对象</span></span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">                <span class="type">byte</span>[] datas = data.getBytes();</span><br><span class="line">                <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(datas, <span class="number">0</span>, datas.length, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="built_in">this</span>.toIP, <span class="built_in">this</span>.toPort));</span><br><span class="line"></span><br><span class="line">                socket.send(packet);</span><br><span class="line">                <span class="keyword">if</span> (data.equals(<span class="string">&quot;bye&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>服务器端接收消息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPServer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UDPServer</span><span class="params">(<span class="type">int</span> port, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//接收包裹</span></span><br><span class="line">                <span class="type">byte</span>[] container = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(container,<span class="number">0</span>,container.length);</span><br><span class="line">                socket.receive(packet);</span><br><span class="line">                <span class="type">byte</span>[] data = packet.getData();</span><br><span class="line">                <span class="type">String</span> <span class="variable">receivedata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,data.length);</span><br><span class="line">                System.out.println(msg + <span class="string">&quot;:&quot;</span> + receivedata);</span><br><span class="line">                <span class="keyword">if</span> (receivedata.equals(<span class="string">&quot;bye&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>编写两个多线程类，实现聊天</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">UDPClient</span>(<span class="number">5555</span>,<span class="string">&quot;localhost&quot;</span>,<span class="number">9999</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">UDPServer</span>(<span class="number">8888</span>,<span class="string">&quot;talk01&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类2，注意端口号之间的对应关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TalkDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">UDPServer</span>(<span class="number">9999</span>,<span class="string">&quot;talk02&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">UDPClient</span>(<span class="number">7777</span>,<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注解和反射"><a href="#注解和反射" class="headerlink" title="注解和反射"></a>注解和反射</h2><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试元注解</span></span><br><span class="line"><span class="meta">@MyAnnotation(name = &quot;test&quot;)</span><span class="comment">//有默认值可以不加括号内容进行赋值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation2(&quot;test2&quot;)</span><span class="comment">//使用value为参数可以不写value  = &quot;&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    自定义注解</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//@Target 表示注解可以用在哪些地方，METHOD是方法，TYPE是类</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="comment">//@Retention 表示注解在什么地方有效</span></span><br><span class="line"><span class="comment">//范围：RUNTIME &gt; CLASS &gt;SOURCES</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">//@Documented 表示是否将我们的注解生成在Java的doc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//@Inherited 子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//@interface 定义注解</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    <span class="comment">//只有一个参数建议使用value</span></span><br><span class="line">    <span class="comment">//注解的参数：参数类型 + 参数名();</span></span><br><span class="line">    <span class="comment">//String name() default &quot;&quot;;可以有默认值</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###反射</p>
<ol>
<li><p>反射类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflection.Person&quot;</span>);</span><br><span class="line">System.out.println(c.getName()); <span class="comment">//获得包名+类名</span></span><br><span class="line">System.out.println(c.getSimpleName());  <span class="comment">//获得类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获得并输出public构造方法</span></span><br><span class="line">Constructor[] constructors = c.getConstructors();</span><br><span class="line"><span class="keyword">for</span> (Constructor constructor:constructors) &#123;</span><br><span class="line">	System.out.println(constructor);</span><br><span class="line">&#125;</span><br><span class="line">c.getConstructor(String.class);  <span class="comment">//获得指定类型的构造器</span></span><br><span class="line">constructors = c.getDeclaredConstructors(); <span class="comment">//获得所有构造方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	同理还有 c.getMethod    获得方法</span></span><br><span class="line"><span class="comment">				  c.getField  获得属性</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></li>
<li><p>动态创建对象执行方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflection.User&quot;</span>);</span><br><span class="line">        <span class="comment">//构建一个对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) c.newInstance();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(String.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User) constructor.newInstance(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">        <span class="comment">//通过反射调用普通方法</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> (User) c.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        setName.invoke(user3,<span class="string">&quot;张三&quot;</span>); <span class="comment">//invoke()激活</span></span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> (User) c.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);<span class="comment">//关闭安全检测，可以直接使用private属性,可以提升程序性能</span></span><br><span class="line">		</span><br><span class="line">        name.set(user4,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(user4.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Class类的常用方法<br><img src="https://raw.githubusercontent.com/xxbl6/PicUplroader/main/img/Class%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.jpg"></p>
</li>
<li><p>对象关系映射 ORM</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射操作注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflection.Student2&quot;</span>);</span><br><span class="line">        <span class="comment">//获得注解</span></span><br><span class="line">        Annotation[] annotations = c.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得注解的value值</span></span><br><span class="line">        <span class="type">ReTable</span> <span class="variable">reTable</span> <span class="operator">=</span> (ReTable) c.getAnnotation(ReTable.class);</span><br><span class="line">        System.out.println(reTable.value());</span><br><span class="line">        <span class="comment">//获得指定注解</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Refield</span> <span class="variable">annotation</span> <span class="operator">=</span> name.getAnnotation(Refield.class);</span><br><span class="line">        System.out.println(annotation.colname());</span><br><span class="line">        System.out.println(annotation.type());</span><br><span class="line">        System.out.println(annotation.length());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ReTable(&quot;table1&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student2</span>&#123;</span><br><span class="line">    <span class="meta">@Refield(type = &quot;varchar&quot;,colname = &quot;tb_name&quot;,length = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Refield(type = &quot;int&quot;,colname = &quot;tb_id&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@Refield(type = &quot;int&quot;,colname = &quot;tb_age&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student2</span><span class="params">(String name, <span class="type">int</span> id, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> ReTable&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Refield&#123;</span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">colname</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><ol>
<li><p>Lambda 表达式可以捕获所在作用域中的变量，但这种捕获是是<span style="color:red">按值捕获</span>的，而不是按引用<br>而对于 final 变量，Java 允许 Lambda 按值捕获“引用”，因为它们的值不会改变</p>
</li>
<li><p><strong>自动装箱</strong> : Java自动将基本数据类型（如 int ）转换为对应的包装类（如 Integer ）的过程。</p>
<pre><code>  使用包装类，如 Integer ，Java 使用了缓存机制，默认范围是 [-128，127] ，使用自动装箱机制创建这个范围内的Integer对象时，Java会返回缓存中已存在的对象实例，而不是创建一个新的对象。自动装箱超过这个范围的整数值时，Java会每次都创建一个新的Integer对象实例。
</code></pre>
</li>
<li><p>锁</p>
<p> 公平锁 ：不可插队，FIFO</p>
<p> 非公平锁 ：可以插队，默认非公平</p>
<p> 死锁 ：使用<span style="color:lightblue"> jps -l</span> 查看激活进程</p>
<p> e.g. 18752 jdk.jcmd&#x2F;sun.tools.jps.Jps(18752 即为进程号)</p>
<p> 使用<span style="color:lightblue"> jstack 进程号 </span>命令查看指定进程信息，可查找死锁问题</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/2024/09/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="Red-Black-Tree-红黑树"><a href="#Red-Black-Tree-红黑树" class="headerlink" title="Red Black Tree 红黑树"></a>Red Black Tree 红黑树</h3><p><img src="https://raw.githubusercontent.com/xxbl6/PicUplroader/main/img/20240810214301.png"></p>
<ol>
<li>定义：<ul>
<li>需为二叉搜索树（左&lt;根&lt;右）</li>
<li>根结点和叶子结点都是黑色(叶子结点为NULL结点）</li>
<li>不存在连续的两个红色结点【不红红】</li>
<li>任一结点到叶子结点的所有路径黑结点数量相同</li>
</ul>
</li>
<li>查询时间复杂度为O(logn)与AVL树相同<br> 实际效率略低于AVL树</li>
<li>插入：<ol>
<li>插入结点默认为<em>红色</em></li>
<li>若违反红黑树性质：<br> 若插入结点是根结点  ——&gt; 直接变黑<br> 若插入结点的叔叔是红色 ——&gt; 叔父爷结点都变色，爷爷结点变成插入结点，继续进行判定<br> 若插入结点的叔叔是黑色 ——&gt;（LL，RR，LR，RL）旋转，然后对旋转点和中心点变色</li>
</ol>
<ul>
<li>LL型：爷爷右旋，爷父变色</li>
<li>RR型：爷爷左旋，爷父变色</li>
<li>LR型：父左旋，爷爷右旋，爷孩变色</li>
<li>RL型：父右旋，爷爷左旋，爷孩变色</li>
</ul>
</li>
<li>删除：<ul>
<li>只有左孩子&#x2F;右孩子：直接代替</li>
<li>没有孩子的红结点：直接删除<br>  没有孩子的黑结点：{记删除结点为d，父结点为p，兄弟结点为s，兄弟孩子结点为r，删除后为双黑}<br>  1）s是黑色：<br>  s至少有一个红孩子结点：（LL，RR，LR，RL）变色，然后旋转<br>      d为右结点：s单左孩子或有两个孩子都认为是LL型，进行变色–&gt;r变s，s变p，p变黑，右旋<br>      d为左结点：s单右孩子或有两个孩子都认为是RR型，进行变色–&gt;r变s，s变p，p变黑，左旋<br>      s为左结点，r为右结点：LR型，变色–&gt;r变p，p变黑，s左旋，p右旋<br>      s为右结点，r为左结点：RL型，变色–&gt;r变p，p变黑，s右旋，p左旋<br>  s的孩子都是黑结点：<br>      s变红，双黑上移，即让p变为双黑，<br>          若p的兄弟结点为黑色，且至少有一个红孩子结点，进行上述调整<br>          若p为红色，则p变单黑<br>          若p为根，则变为单黑<br>  2） s是红色：兄父变色，父朝双黑结点旋转，保持双黑，继续进行调整</li>
<li>有两个孩子：通过直接前驱或直接后驱的替换，转换为只有左子树或只有右子树、没有孩子的结点的结点<br>  <em>通过中序遍历，当前结点的前一个结点为它的直接前驱，后一个结点为当前 结点的直接后继</em></li>
</ul>
</li>
</ol>
<h3 id="B-Tree-B-树"><a href="#B-Tree-B-树" class="headerlink" title="B Tree  B 树"></a>B Tree  B 树</h3><ul>
<li>m阶b树：m为最多的分叉</li>
<li>最大元素个数：阶数-1</li>
<li>叶子结点下为 失败结点</li>
<li>插入：先查找到插入的位置（一定在叶子结点）<br>       如果没有上溢出（超过最大元素个数，无需调整）、<br>       否则中间元素（m&#x2F;2）上移，两边分裂，直到没有上溢出为止</li>
</ul>
<p><img src="https://raw.githubusercontent.com/xxbl6/PicUplroader/main/img/b%E6%A0%91%20.jpg"></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2024/07/14/Spring/</url>
    <content><![CDATA[<h2 id="常见bug"><a href="#常见bug" class="headerlink" title="常见bug"></a>常见bug</h2><p>1、@Data注解没有生成getter&#x2F;setter方法<br>    settings中，从Plugins中搜索lombok插件并install，重启idea即可。  </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
